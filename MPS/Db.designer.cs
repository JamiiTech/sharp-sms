#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3031
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MPSDb
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MPS")]
	public partial class DbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbonent(Abonent instance);
    partial void UpdateAbonent(Abonent instance);
    partial void DeleteAbonent(Abonent instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertBasket(Basket instance);
    partial void UpdateBasket(Basket instance);
    partial void DeleteBasket(Basket instance);
    partial void InsertMap(Map instance);
    partial void UpdateMap(Map instance);
    partial void DeleteMap(Map instance);
    partial void InsertMe(Me instance);
    partial void UpdateMe(Me instance);
    partial void DeleteMe(Me instance);
    partial void InsertMeFile(MeFile instance);
    partial void UpdateMeFile(MeFile instance);
    partial void DeleteMeFile(MeFile instance);
    partial void InsertMeFileType(MeFileType instance);
    partial void UpdateMeFileType(MeFileType instance);
    partial void DeleteMeFileType(MeFileType instance);
    partial void InsertMeType(MeType instance);
    partial void UpdateMeType(MeType instance);
    partial void DeleteMeType(MeType instance);
    partial void InsertOrderMap(OrderMap instance);
    partial void UpdateOrderMap(OrderMap instance);
    partial void DeleteOrderMap(OrderMap instance);
    partial void InsertSellFileType(SellFileType instance);
    partial void UpdateSellFileType(SellFileType instance);
    partial void DeleteSellFileType(SellFileType instance);
    partial void InsertSellType(SellType instance);
    partial void UpdateSellType(SellType instance);
    partial void DeleteSellType(SellType instance);
    #endregion
		
		public DbDataContext() : 
				base(global::MPS.Properties.Settings.Default.MPSConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Abonent> Abonents
		{
			get
			{
				return this.GetTable<Abonent>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<BasketItem> BasketItems
		{
			get
			{
				return this.GetTable<BasketItem>();
			}
		}
		
		public System.Data.Linq.Table<Basket> Baskets
		{
			get
			{
				return this.GetTable<Basket>();
			}
		}
		
		public System.Data.Linq.Table<Map> Maps
		{
			get
			{
				return this.GetTable<Map>();
			}
		}
		
		public System.Data.Linq.Table<Me> Mes
		{
			get
			{
				return this.GetTable<Me>();
			}
		}
		
		public System.Data.Linq.Table<MeFile> MeFiles
		{
			get
			{
				return this.GetTable<MeFile>();
			}
		}
		
		public System.Data.Linq.Table<MeFileType> MeFileTypes
		{
			get
			{
				return this.GetTable<MeFileType>();
			}
		}
		
		public System.Data.Linq.Table<MeType> MeTypes
		{
			get
			{
				return this.GetTable<MeType>();
			}
		}
		
		public System.Data.Linq.Table<OrderMap> OrderMaps
		{
			get
			{
				return this.GetTable<OrderMap>();
			}
		}
		
		public System.Data.Linq.Table<SellFileType> SellFileTypes
		{
			get
			{
				return this.GetTable<SellFileType>();
			}
		}
		
		public System.Data.Linq.Table<SellType> SellTypes
		{
			get
			{
				return this.GetTable<SellType>();
			}
		}
	}
	
	[Table(Name="dbo.Abonents")]
	public partial class Abonent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MSISDN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMSISDNChanging(string value);
    partial void OnMSISDNChanged();
    #endregion
		
		public Abonent()
		{
			OnCreated();
		}
		
		[Column(Storage="_MSISDN", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MSISDN
		{
			get
			{
				return this._MSISDN;
			}
			set
			{
				if ((this._MSISDN != value))
				{
					this.OnMSISDNChanging(value);
					this.SendPropertyChanging();
					this._MSISDN = value;
					this.SendPropertyChanged("MSISDN");
					this.OnMSISDNChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _key;
		
		private string _value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnkeyChanging(string value);
    partial void OnkeyChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[Column(Name="[key]", Storage="_key", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string key
		{
			get
			{
				return this._key;
			}
			set
			{
				if ((this._key != value))
				{
					this.OnkeyChanging(value);
					this.SendPropertyChanging();
					this._key = value;
					this.SendPropertyChanged("key");
					this.OnkeyChanged();
				}
			}
		}
		
		[Column(Storage="_value", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BasketItems")]
	public partial class BasketItem
	{
		
		private int _id;
		
		private int _idBasket;
		
		private string _MSISDN;
		
		private int _idMe;
		
		private bool _isRetrieved;
		
		private bool _isPurchased;
		
		private decimal _price;
		
		private System.DateTime _dateModified;
		
		private System.DateTime _datePurchased;
		
		private string _hash;
		
		private int _idSellType;
		
		public BasketItem()
		{
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL")]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_idBasket", DbType="Int NOT NULL")]
		public int idBasket
		{
			get
			{
				return this._idBasket;
			}
			set
			{
				if ((this._idBasket != value))
				{
					this._idBasket = value;
				}
			}
		}
		
		[Column(Storage="_MSISDN", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string MSISDN
		{
			get
			{
				return this._MSISDN;
			}
			set
			{
				if ((this._MSISDN != value))
				{
					this._MSISDN = value;
				}
			}
		}
		
		[Column(Storage="_idMe", DbType="Int NOT NULL")]
		public int idMe
		{
			get
			{
				return this._idMe;
			}
			set
			{
				if ((this._idMe != value))
				{
					this._idMe = value;
				}
			}
		}
		
		[Column(Storage="_isRetrieved", DbType="Bit NOT NULL")]
		public bool isRetrieved
		{
			get
			{
				return this._isRetrieved;
			}
			set
			{
				if ((this._isRetrieved != value))
				{
					this._isRetrieved = value;
				}
			}
		}
		
		[Column(Storage="_isPurchased", DbType="Bit NOT NULL")]
		public bool isPurchased
		{
			get
			{
				return this._isPurchased;
			}
			set
			{
				if ((this._isPurchased != value))
				{
					this._isPurchased = value;
				}
			}
		}
		
		[Column(Storage="_price", DbType="Money NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this._price = value;
				}
			}
		}
		
		[Column(Storage="_dateModified", DbType="SmallDateTime NOT NULL")]
		public System.DateTime dateModified
		{
			get
			{
				return this._dateModified;
			}
			set
			{
				if ((this._dateModified != value))
				{
					this._dateModified = value;
				}
			}
		}
		
		[Column(Storage="_datePurchased", DbType="SmallDateTime NOT NULL")]
		public System.DateTime datePurchased
		{
			get
			{
				return this._datePurchased;
			}
			set
			{
				if ((this._datePurchased != value))
				{
					this._datePurchased = value;
				}
			}
		}
		
		[Column(Storage="_hash", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string hash
		{
			get
			{
				return this._hash;
			}
			set
			{
				if ((this._hash != value))
				{
					this._hash = value;
				}
			}
		}
		
		[Column(Storage="_idSellType", DbType="Int NOT NULL")]
		public int idSellType
		{
			get
			{
				return this._idSellType;
			}
			set
			{
				if ((this._idSellType != value))
				{
					this._idSellType = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.Baskets")]
	public partial class Basket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _descr;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescrChanging(string value);
    partial void OndescrChanged();
    #endregion
		
		public Basket()
		{
			OnCreated();
		}
		
		[Column(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_descr", DbType="NVarChar(255)")]
		public string descr
		{
			get
			{
				return this._descr;
			}
			set
			{
				if ((this._descr != value))
				{
					this.OndescrChanging(value);
					this.SendPropertyChanging();
					this._descr = value;
					this.SendPropertyChanged("descr");
					this.OndescrChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Map")]
	public partial class Map : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idMe;
		
		private string _code;
		
		private string _sn;
		
		private EntitySet<OrderMap> _OrderMaps;
		
		private EntityRef<Me> _Me;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidMeChanging(int value);
    partial void OnidMeChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OnsnChanging(string value);
    partial void OnsnChanged();
    #endregion
		
		public Map()
		{
			this._OrderMaps = new EntitySet<OrderMap>(new Action<OrderMap>(this.attach_OrderMaps), new Action<OrderMap>(this.detach_OrderMaps));
			this._Me = default(EntityRef<Me>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idMe", DbType="Int NOT NULL")]
		public int idMe
		{
			get
			{
				return this._idMe;
			}
			set
			{
				if ((this._idMe != value))
				{
					if (this._Me.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMeChanging(value);
					this.SendPropertyChanging();
					this._idMe = value;
					this.SendPropertyChanged("idMe");
					this.OnidMeChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_sn", DbType="NVarChar(4) NOT NULL", CanBeNull=false)]
		public string sn
		{
			get
			{
				return this._sn;
			}
			set
			{
				if ((this._sn != value))
				{
					this.OnsnChanging(value);
					this.SendPropertyChanging();
					this._sn = value;
					this.SendPropertyChanged("sn");
					this.OnsnChanged();
				}
			}
		}
		
		[Association(Name="Map_OrderMap", Storage="_OrderMaps", OtherKey="idMap")]
		public EntitySet<OrderMap> OrderMaps
		{
			get
			{
				return this._OrderMaps;
			}
			set
			{
				this._OrderMaps.Assign(value);
			}
		}
		
		[Association(Name="Me_Map", Storage="_Me", ThisKey="idMe", IsForeignKey=true)]
		public Me Me
		{
			get
			{
				return this._Me.Entity;
			}
			set
			{
				Me previousValue = this._Me.Entity;
				if (((previousValue != value) 
							|| (this._Me.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Me.Entity = null;
						previousValue.Maps.Remove(this);
					}
					this._Me.Entity = value;
					if ((value != null))
					{
						value.Maps.Add(this);
						this._idMe = value.id;
					}
					else
					{
						this._idMe = default(int);
					}
					this.SendPropertyChanged("Me");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderMaps(OrderMap entity)
		{
			this.SendPropertyChanging();
			entity.Map = this;
		}
		
		private void detach_OrderMaps(OrderMap entity)
		{
			this.SendPropertyChanging();
			entity.Map = null;
		}
	}
	
	[Table(Name="dbo.Me")]
	public partial class Me : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idMeType;
		
		private EntitySet<Map> _Maps;
		
		private EntitySet<MeFile> _MeFiles;
		
		private EntityRef<MeType> _MeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidMeTypeChanging(int value);
    partial void OnidMeTypeChanged();
    #endregion
		
		public Me()
		{
			this._Maps = new EntitySet<Map>(new Action<Map>(this.attach_Maps), new Action<Map>(this.detach_Maps));
			this._MeFiles = new EntitySet<MeFile>(new Action<MeFile>(this.attach_MeFiles), new Action<MeFile>(this.detach_MeFiles));
			this._MeType = default(EntityRef<MeType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idMeType", DbType="Int NOT NULL")]
		public int idMeType
		{
			get
			{
				return this._idMeType;
			}
			set
			{
				if ((this._idMeType != value))
				{
					if (this._MeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMeTypeChanging(value);
					this.SendPropertyChanging();
					this._idMeType = value;
					this.SendPropertyChanged("idMeType");
					this.OnidMeTypeChanged();
				}
			}
		}
		
		[Association(Name="Me_Map", Storage="_Maps", OtherKey="idMe")]
		public EntitySet<Map> Maps
		{
			get
			{
				return this._Maps;
			}
			set
			{
				this._Maps.Assign(value);
			}
		}
		
		[Association(Name="Me_MeFile", Storage="_MeFiles", OtherKey="idMe")]
		public EntitySet<MeFile> MeFiles
		{
			get
			{
				return this._MeFiles;
			}
			set
			{
				this._MeFiles.Assign(value);
			}
		}
		
		[Association(Name="MeType_Me", Storage="_MeType", ThisKey="idMeType", IsForeignKey=true)]
		public MeType MeType
		{
			get
			{
				return this._MeType.Entity;
			}
			set
			{
				MeType previousValue = this._MeType.Entity;
				if (((previousValue != value) 
							|| (this._MeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeType.Entity = null;
						previousValue.Mes.Remove(this);
					}
					this._MeType.Entity = value;
					if ((value != null))
					{
						value.Mes.Add(this);
						this._idMeType = value.id;
					}
					else
					{
						this._idMeType = default(int);
					}
					this.SendPropertyChanged("MeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.Me = this;
		}
		
		private void detach_Maps(Map entity)
		{
			this.SendPropertyChanging();
			entity.Me = null;
		}
		
		private void attach_MeFiles(MeFile entity)
		{
			this.SendPropertyChanging();
			entity.Me = this;
		}
		
		private void detach_MeFiles(MeFile entity)
		{
			this.SendPropertyChanging();
			entity.Me = null;
		}
	}
	
	[Table(Name="dbo.MeFiles")]
	public partial class MeFile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idMe;
		
		private int _idMeFileType;
		
		private string _val;
		
		private EntityRef<Me> _Me;
		
		private EntityRef<MeFileType> _MeFileType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidMeChanging(int value);
    partial void OnidMeChanged();
    partial void OnidMeFileTypeChanging(int value);
    partial void OnidMeFileTypeChanged();
    partial void OnvalChanging(string value);
    partial void OnvalChanged();
    #endregion
		
		public MeFile()
		{
			this._Me = default(EntityRef<Me>);
			this._MeFileType = default(EntityRef<MeFileType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idMe", DbType="Int NOT NULL")]
		public int idMe
		{
			get
			{
				return this._idMe;
			}
			set
			{
				if ((this._idMe != value))
				{
					if (this._Me.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMeChanging(value);
					this.SendPropertyChanging();
					this._idMe = value;
					this.SendPropertyChanged("idMe");
					this.OnidMeChanged();
				}
			}
		}
		
		[Column(Storage="_idMeFileType", DbType="Int NOT NULL")]
		public int idMeFileType
		{
			get
			{
				return this._idMeFileType;
			}
			set
			{
				if ((this._idMeFileType != value))
				{
					if (this._MeFileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMeFileTypeChanging(value);
					this.SendPropertyChanging();
					this._idMeFileType = value;
					this.SendPropertyChanged("idMeFileType");
					this.OnidMeFileTypeChanged();
				}
			}
		}
		
		[Column(Storage="_val", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string val
		{
			get
			{
				return this._val;
			}
			set
			{
				if ((this._val != value))
				{
					this.OnvalChanging(value);
					this.SendPropertyChanging();
					this._val = value;
					this.SendPropertyChanged("val");
					this.OnvalChanged();
				}
			}
		}
		
		[Association(Name="Me_MeFile", Storage="_Me", ThisKey="idMe", IsForeignKey=true)]
		public Me Me
		{
			get
			{
				return this._Me.Entity;
			}
			set
			{
				Me previousValue = this._Me.Entity;
				if (((previousValue != value) 
							|| (this._Me.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Me.Entity = null;
						previousValue.MeFiles.Remove(this);
					}
					this._Me.Entity = value;
					if ((value != null))
					{
						value.MeFiles.Add(this);
						this._idMe = value.id;
					}
					else
					{
						this._idMe = default(int);
					}
					this.SendPropertyChanged("Me");
				}
			}
		}
		
		[Association(Name="MeFileType_MeFile", Storage="_MeFileType", ThisKey="idMeFileType", IsForeignKey=true)]
		public MeFileType MeFileType
		{
			get
			{
				return this._MeFileType.Entity;
			}
			set
			{
				MeFileType previousValue = this._MeFileType.Entity;
				if (((previousValue != value) 
							|| (this._MeFileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeFileType.Entity = null;
						previousValue.MeFiles.Remove(this);
					}
					this._MeFileType.Entity = value;
					if ((value != null))
					{
						value.MeFiles.Add(this);
						this._idMeFileType = value.id;
					}
					else
					{
						this._idMeFileType = default(int);
					}
					this.SendPropertyChanged("MeFileType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.MeFileTypes")]
	public partial class MeFileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idMeType;
		
		private string _descr;
		
		private string _suffix;
		
		private EntitySet<MeFile> _MeFiles;
		
		private EntitySet<SellFileType> _SellFileTypes;
		
		private EntityRef<MeType> _MeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidMeTypeChanging(int value);
    partial void OnidMeTypeChanged();
    partial void OndescrChanging(string value);
    partial void OndescrChanged();
    partial void OnsuffixChanging(string value);
    partial void OnsuffixChanged();
    #endregion
		
		public MeFileType()
		{
			this._MeFiles = new EntitySet<MeFile>(new Action<MeFile>(this.attach_MeFiles), new Action<MeFile>(this.detach_MeFiles));
			this._SellFileTypes = new EntitySet<SellFileType>(new Action<SellFileType>(this.attach_SellFileTypes), new Action<SellFileType>(this.detach_SellFileTypes));
			this._MeType = default(EntityRef<MeType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idMeType", DbType="Int NOT NULL")]
		public int idMeType
		{
			get
			{
				return this._idMeType;
			}
			set
			{
				if ((this._idMeType != value))
				{
					if (this._MeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMeTypeChanging(value);
					this.SendPropertyChanging();
					this._idMeType = value;
					this.SendPropertyChanged("idMeType");
					this.OnidMeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_descr", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string descr
		{
			get
			{
				return this._descr;
			}
			set
			{
				if ((this._descr != value))
				{
					this.OndescrChanging(value);
					this.SendPropertyChanging();
					this._descr = value;
					this.SendPropertyChanged("descr");
					this.OndescrChanged();
				}
			}
		}
		
		[Column(Storage="_suffix", DbType="NVarChar(255)")]
		public string suffix
		{
			get
			{
				return this._suffix;
			}
			set
			{
				if ((this._suffix != value))
				{
					this.OnsuffixChanging(value);
					this.SendPropertyChanging();
					this._suffix = value;
					this.SendPropertyChanged("suffix");
					this.OnsuffixChanged();
				}
			}
		}
		
		[Association(Name="MeFileType_MeFile", Storage="_MeFiles", OtherKey="idMeFileType")]
		public EntitySet<MeFile> MeFiles
		{
			get
			{
				return this._MeFiles;
			}
			set
			{
				this._MeFiles.Assign(value);
			}
		}
		
		[Association(Name="MeFileType_SellFileType", Storage="_SellFileTypes", OtherKey="idMeFileType")]
		public EntitySet<SellFileType> SellFileTypes
		{
			get
			{
				return this._SellFileTypes;
			}
			set
			{
				this._SellFileTypes.Assign(value);
			}
		}
		
		[Association(Name="MeType_MeFileType", Storage="_MeType", ThisKey="idMeType", IsForeignKey=true)]
		public MeType MeType
		{
			get
			{
				return this._MeType.Entity;
			}
			set
			{
				MeType previousValue = this._MeType.Entity;
				if (((previousValue != value) 
							|| (this._MeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeType.Entity = null;
						previousValue.MeFileTypes.Remove(this);
					}
					this._MeType.Entity = value;
					if ((value != null))
					{
						value.MeFileTypes.Add(this);
						this._idMeType = value.id;
					}
					else
					{
						this._idMeType = default(int);
					}
					this.SendPropertyChanged("MeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeFiles(MeFile entity)
		{
			this.SendPropertyChanging();
			entity.MeFileType = this;
		}
		
		private void detach_MeFiles(MeFile entity)
		{
			this.SendPropertyChanging();
			entity.MeFileType = null;
		}
		
		private void attach_SellFileTypes(SellFileType entity)
		{
			this.SendPropertyChanging();
			entity.MeFileType = this;
		}
		
		private void detach_SellFileTypes(SellFileType entity)
		{
			this.SendPropertyChanging();
			entity.MeFileType = null;
		}
	}
	
	[Table(Name="dbo.MeTypes")]
	public partial class MeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _descr;
		
		private EntitySet<Me> _Mes;
		
		private EntitySet<MeFileType> _MeFileTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndescrChanging(string value);
    partial void OndescrChanged();
    #endregion
		
		public MeType()
		{
			this._Mes = new EntitySet<Me>(new Action<Me>(this.attach_Mes), new Action<Me>(this.detach_Mes));
			this._MeFileTypes = new EntitySet<MeFileType>(new Action<MeFileType>(this.attach_MeFileTypes), new Action<MeFileType>(this.detach_MeFileTypes));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_descr", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string descr
		{
			get
			{
				return this._descr;
			}
			set
			{
				if ((this._descr != value))
				{
					this.OndescrChanging(value);
					this.SendPropertyChanging();
					this._descr = value;
					this.SendPropertyChanged("descr");
					this.OndescrChanged();
				}
			}
		}
		
		[Association(Name="MeType_Me", Storage="_Mes", OtherKey="idMeType")]
		public EntitySet<Me> Mes
		{
			get
			{
				return this._Mes;
			}
			set
			{
				this._Mes.Assign(value);
			}
		}
		
		[Association(Name="MeType_MeFileType", Storage="_MeFileTypes", OtherKey="idMeType")]
		public EntitySet<MeFileType> MeFileTypes
		{
			get
			{
				return this._MeFileTypes;
			}
			set
			{
				this._MeFileTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mes(Me entity)
		{
			this.SendPropertyChanging();
			entity.MeType = this;
		}
		
		private void detach_Mes(Me entity)
		{
			this.SendPropertyChanging();
			entity.MeType = null;
		}
		
		private void attach_MeFileTypes(MeFileType entity)
		{
			this.SendPropertyChanging();
			entity.MeType = this;
		}
		
		private void detach_MeFileTypes(MeFileType entity)
		{
			this.SendPropertyChanging();
			entity.MeType = null;
		}
	}
	
	[Table(Name="dbo.OrderMap")]
	public partial class OrderMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idMap;
		
		private string _phone;
		
		private System.Guid _hash;
		
		private int _idBasket;
		
		private EntityRef<Map> _Map;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidMapChanging(int value);
    partial void OnidMapChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnhashChanging(System.Guid value);
    partial void OnhashChanged();
    partial void OnidBasketChanging(int value);
    partial void OnidBasketChanged();
    #endregion
		
		public OrderMap()
		{
			this._Map = default(EntityRef<Map>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idMap", DbType="Int NOT NULL")]
		public int idMap
		{
			get
			{
				return this._idMap;
			}
			set
			{
				if ((this._idMap != value))
				{
					if (this._Map.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMapChanging(value);
					this.SendPropertyChanging();
					this._idMap = value;
					this.SendPropertyChanged("idMap");
					this.OnidMapChanged();
				}
			}
		}
		
		[Column(Storage="_phone", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[Column(Storage="_hash", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid hash
		{
			get
			{
				return this._hash;
			}
			set
			{
				if ((this._hash != value))
				{
					this.OnhashChanging(value);
					this.SendPropertyChanging();
					this._hash = value;
					this.SendPropertyChanged("hash");
					this.OnhashChanged();
				}
			}
		}
		
		[Column(Storage="_idBasket", DbType="Int NOT NULL")]
		public int idBasket
		{
			get
			{
				return this._idBasket;
			}
			set
			{
				if ((this._idBasket != value))
				{
					this.OnidBasketChanging(value);
					this.SendPropertyChanging();
					this._idBasket = value;
					this.SendPropertyChanged("idBasket");
					this.OnidBasketChanged();
				}
			}
		}
		
		[Association(Name="Map_OrderMap", Storage="_Map", ThisKey="idMap", IsForeignKey=true)]
		public Map Map
		{
			get
			{
				return this._Map.Entity;
			}
			set
			{
				Map previousValue = this._Map.Entity;
				if (((previousValue != value) 
							|| (this._Map.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Map.Entity = null;
						previousValue.OrderMaps.Remove(this);
					}
					this._Map.Entity = value;
					if ((value != null))
					{
						value.OrderMaps.Add(this);
						this._idMap = value.id;
					}
					else
					{
						this._idMap = default(int);
					}
					this.SendPropertyChanged("Map");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SellFileTypes")]
	public partial class SellFileType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _idSellType;
		
		private int _idMeFileType;
		
		private string _name;
		
		private EntityRef<MeFileType> _MeFileType;
		
		private EntityRef<SellType> _SellType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnidSellTypeChanging(int value);
    partial void OnidSellTypeChanged();
    partial void OnidMeFileTypeChanging(int value);
    partial void OnidMeFileTypeChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public SellFileType()
		{
			this._MeFileType = default(EntityRef<MeFileType>);
			this._SellType = default(EntityRef<SellType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_idSellType", DbType="Int NOT NULL")]
		public int idSellType
		{
			get
			{
				return this._idSellType;
			}
			set
			{
				if ((this._idSellType != value))
				{
					if (this._SellType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSellTypeChanging(value);
					this.SendPropertyChanging();
					this._idSellType = value;
					this.SendPropertyChanged("idSellType");
					this.OnidSellTypeChanged();
				}
			}
		}
		
		[Column(Storage="_idMeFileType", DbType="Int NOT NULL")]
		public int idMeFileType
		{
			get
			{
				return this._idMeFileType;
			}
			set
			{
				if ((this._idMeFileType != value))
				{
					if (this._MeFileType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidMeFileTypeChanging(value);
					this.SendPropertyChanging();
					this._idMeFileType = value;
					this.SendPropertyChanged("idMeFileType");
					this.OnidMeFileTypeChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Association(Name="MeFileType_SellFileType", Storage="_MeFileType", ThisKey="idMeFileType", IsForeignKey=true)]
		public MeFileType MeFileType
		{
			get
			{
				return this._MeFileType.Entity;
			}
			set
			{
				MeFileType previousValue = this._MeFileType.Entity;
				if (((previousValue != value) 
							|| (this._MeFileType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MeFileType.Entity = null;
						previousValue.SellFileTypes.Remove(this);
					}
					this._MeFileType.Entity = value;
					if ((value != null))
					{
						value.SellFileTypes.Add(this);
						this._idMeFileType = value.id;
					}
					else
					{
						this._idMeFileType = default(int);
					}
					this.SendPropertyChanged("MeFileType");
				}
			}
		}
		
		[Association(Name="SellType_SellFileType", Storage="_SellType", ThisKey="idSellType", IsForeignKey=true)]
		public SellType SellType
		{
			get
			{
				return this._SellType.Entity;
			}
			set
			{
				SellType previousValue = this._SellType.Entity;
				if (((previousValue != value) 
							|| (this._SellType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SellType.Entity = null;
						previousValue.SellFileTypes.Remove(this);
					}
					this._SellType.Entity = value;
					if ((value != null))
					{
						value.SellFileTypes.Add(this);
						this._idSellType = value.id;
					}
					else
					{
						this._idSellType = default(int);
					}
					this.SendPropertyChanged("SellType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SellTypes")]
	public partial class SellType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _descr;
		
		private EntitySet<SellFileType> _SellFileTypes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescrChanging(string value);
    partial void OndescrChanged();
    #endregion
		
		public SellType()
		{
			this._SellFileTypes = new EntitySet<SellFileType>(new Action<SellFileType>(this.attach_SellFileTypes), new Action<SellFileType>(this.detach_SellFileTypes));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_descr", DbType="NVarChar(255)")]
		public string descr
		{
			get
			{
				return this._descr;
			}
			set
			{
				if ((this._descr != value))
				{
					this.OndescrChanging(value);
					this.SendPropertyChanging();
					this._descr = value;
					this.SendPropertyChanged("descr");
					this.OndescrChanged();
				}
			}
		}
		
		[Association(Name="SellType_SellFileType", Storage="_SellFileTypes", OtherKey="idSellType")]
		public EntitySet<SellFileType> SellFileTypes
		{
			get
			{
				return this._SellFileTypes;
			}
			set
			{
				this._SellFileTypes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SellFileTypes(SellFileType entity)
		{
			this.SendPropertyChanging();
			entity.SellType = this;
		}
		
		private void detach_SellFileTypes(SellFileType entity)
		{
			this.SendPropertyChanging();
			entity.SellType = null;
		}
	}
}
#pragma warning restore 1591
